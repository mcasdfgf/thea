# cmd_insights.py: Implements commands for analyzing KnowledgeCrystalNodes.
# This module provides tools to list, filter, find, and inspect the 'insights'
# (`KnowledgeCrystalNode`) generated by the cognitive architecture's reflection
# processes, allowing for direct inspection of the system's learned knowledge.

import textwrap
from colorama import Fore


def register():
    """Registers the insight-specific commands with the Nexus shell."""
    return {
        "insights": {
            "func": cmd_list_insights,
            "alias": ["i"],
            "help": 'List insights with filters and pagination. Use "i --help" for details.',
            "category": "Knowledge Analysis",
        },
        "ifind": {
            "func": cmd_find_insight,
            "alias": [],
            "help": "Find all insights linked to a specific concept. Usage: ifind <concept>",
            "category": "Knowledge Analysis",
        },
        "iget": {
            "func": cmd_get_insight,
            "alias": [],
            "help": "Get detailed information for a single insight by ID. Usage: iget <id>",
            "category": "Knowledge Analysis",
        },
    }


# --- Constants for state mapping and sorting ---
# Maps user-friendly numeric codes to the internal state names.
STATE_MAP = {"1": 1, "0": 0}  # 1 = Active, 0 = Archived

# --- Command Logic ---


def print_ifind_help(style):
    cmd, arg_name, sec, header, reset = (
        style["cmd_name"],
        style["arg_name"],
        style["secondary_text"],
        style["header"],
        style["reset"],
    )
    print(f"\n{header}Usage: {cmd}ifind {arg_name}<concept>{reset}")
    print(f"{sec}Finds all insights linked to a specific concept.{reset}\n")
    print(f"{header}Arguments:{reset}")
    print(
        f"  {arg_name}<concept>{reset} (Required) The name of the concept to search for. Case-insensitive.\n"
    )


def print_iget_help(style):
    cmd, arg_name, sec, header, reset = (
        style["cmd_name"],
        style["arg_name"],
        style["secondary_text"],
        style["header"],
        style["reset"],
    )
    print(f"\n{header}Usage: {cmd}iget {arg_name}<id>{reset}")
    print(
        f"{sec}Displays detailed information for a single insight by its ID.{reset}\n"
    )
    print(f"{header}Arguments:{reset}")
    print(
        f"  {arg_name}<id>{reset} (Required) The full or partial ID of the insight to display.\n"
    )
    print(f"{header}Example:{reset}")
    print(f"  {cmd}iget {style['arg_value']}a1b2c3d4{reset}")


async def cmd_list_insights(memory, style, args, **kwargs):
    """Handler for the 'insights' command to list and filter KnowledgeCrystals."""
    if "--help" in args:
        print_insights_help(style)
        return

    # --- Simple argument parsing for flags and values ---
    # NOTE: A full argparse is avoided here for simplicity, as the arguments are basic.
    state_code = None
    page = 1
    page_size = 20  # Default items per page

    for arg in args:
        if arg in STATE_MAP:
            state_code = arg
            break

    if "--state" in args:
        try:
            state_code = args[args.index("--state") + 1]
        except IndexError:
            print(
                f"{style['error']}Error:{style['reset']} --state flag requires an argument (e.g., --state 1)."
            )
            return

    if "--page" in args:
        try:
            page = int(args[args.index("--page") + 1])
        except (IndexError, ValueError):
            print(
                f"{style['error']}Error:{style['reset']} --page flag requires a number (e.g., --page 2)."
            )
            return

    if state_code and state_code not in STATE_MAP:
        print(
            f"{style['error']}Error:{style['reset']} Invalid state code '{state_code}'. Use 1 (ACTIVE) or 0 (ARCHIVED)."
        )
        return

    print(f"{style['meta_info']}SCAN:{style['reset']} Scanning & sorting insights...")
    all_insights = _get_all_insights(memory)
    if not all_insights:
        print("Info: No KnowledgeCrystal nodes were found in memory.")
        return

    # --- Filtering Logic ---
    filtered = all_insights
    state_filter_str = "all states"
    if state_code:
        target_state = int(STATE_MAP[state_code])
        state_filter_str = (
            f"state 'ACTIVE'" if target_state == 1 else f"state 'ARCHIVED'"
        )
        filtered = [
            i for i in all_insights if int(i.get("active_status", 0)) == target_state
        ]

    if not filtered:
        print(f"Info: No insights were found matching the filter: {state_filter_str}.")
        return

    sorted_insights = _sort_insights(filtered)

    # --- Pagination Logic ---
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    paginated_results = sorted_insights[start_index:end_index]
    total_pages = (len(sorted_insights) + page_size - 1) // page_size

    if not paginated_results:
        print(
            f"Info: No insights on page {page}. Total pages available: {total_pages}."
        )
        return

    # --- Formatted Output ---
    print("-" * 120)
    header = f"ðŸ”¬ Knowledge Inspector: Found {len(sorted_insights)} insights (filter: {state_filter_str})"
    pagination_info = f"Displaying page {page}/{total_pages}"
    print(f"{style['header']}{header:<80} {pagination_info:>38}{style['reset']}")
    print("-" * 120)

    for insight in paginated_results:
        _print_insight_row(style, insight)

    print("-" * 120)
    if page < total_pages:
        print(
            f"Hint: To see the next page, use: '{style['cmd_name']}i --page {style['arg_name']}{page + 1}{style['reset']}' (with your filters)."
        )


async def cmd_find_insight(memory, style, args, **kwargs):
    """Handler for the 'ifind' command to find insights by a concept."""
    if not args or "--help" in args:
        print_ifind_help(style)
        return

    concept = " ".join(args)
    concept_to_find = concept.strip().lower()
    print(
        f"{style['meta_info']}QUERY:{style['reset']} Searching for insights linked to concept: '{style['arg_name']}{concept_to_find}{style['reset']}'..."
    )

    all_insights = _get_all_insights(memory)

    # Find insights by checking if the target concept exists in the
    # 'source_concepts' field (expected to be a comma-separated string).
    found = [
        i
        for i in all_insights
        if concept_to_find
        in [c.strip().lower() for c in i.get("source_concepts", "").split(",")]
    ]

    if not found:
        print(f"Info: No insights were found linked to the concept '{concept}'.")
        return

    sorted_found = _sort_insights(found)

    print("-" * 120)
    print(
        f"ðŸ”¬ {style['header']}Knowledge Inspector:{style['reset']} Found {len(sorted_found)} insights linked to concept '{style['arg_name']}{concept}{style['reset']}'."
    )
    print("-" * 120)
    for insight in sorted_found:
        _print_insight_row(style, insight)
    print("-" * 120)


async def cmd_get_insight(memory, style, args, **kwargs):
    """Handler for the 'iget' command to display details of a single insight."""
    if not args or "--help" in args:
        print_iget_help(style)
        return

    partial_id = args[0].strip().lower()
    print(
        f"{style['meta_info']}FETCH:{style['reset']} Retrieving insight with ID starting with: '{style['arg_name']}{partial_id}{style['reset']}'..."
    )

    all_insights = _get_all_insights(memory)

    found_insight = next(
        (i for i in all_insights if i.get("id", "").lower().startswith(partial_id)),
        None,
    )

    if not found_insight:
        print(f"Info: No insight found with an ID prefix of '{partial_id}'.")
        return

    # --- Formatted Detailed Output ---
    print(f"\n// {style['header']}INSIGHT :: {found_insight.get('id')[:8]}{style['reset']} //")
    print("-" * 60)

    # --- New logic to handle active_status and strength ---
    is_active = int(found_insight.get("active_status", 1)) # Default to active if not present
    strength = int(found_insight.get("strength", 1))      # Default to 1 if not present

    status_text = "ACTIVE" if is_active == 1 else "ARCHIVED"
    status_color = style["highlight"] if is_active == 1 else style["lowlight"]

    print(f"{style['cmd_name']}{'ID':<15}:{style['reset']} {found_insight.get('id')}")
    print(f"{style['cmd_name']}{'Timestamp':<15}:{style['reset']} {found_insight.get('timestamp', 'N/A')}")
    print("-" * 20)
    print(f"{style['cmd_name']}{'Status':<15}:{style['reset']} {status_color}{status_text}{style['reset']}")
    print(f"{style['cmd_name']}{'Strength':<15}:{style['reset']} {strength}")
    print("-" * 20)
    print(f"{style['cmd_name']}{'Source Impulse':<15}:{style['reset']} {found_insight.get('source_impulse', 'N/A')}")
    print(
        f"{style['cmd_name']}{'Source Concepts':<15}:{style['reset']} {style['arg_name']}{found_insight.get('source_concepts', 'N/A')}{style['reset']}"
    )
    print(f"{style['cmd_name']}{'Content':<15}:{style['reset']}")
    print(
        textwrap.fill(
            found_insight.get("content", ""),
            width=80,
            initial_indent="  ",
            subsequent_indent="  ",
        )
    )
    print("-" * 60)


# --- Helper Functions ---
def print_insights_help(style):
    cmd, arg_name, arg_val, sec, header, reset = (
        style["cmd_name"],
        style["arg_name"],
        style["arg_value"],
        style["secondary_text"],
        style["header"],
        style["reset"],
    )
    hi, lo = style["highlight"], style["lowlight"]

    print(
        f"\n{header}Usage: {cmd}insights (i){reset} [{arg_name}--state{reset} {arg_val}<StateCode>{reset}] [{arg_name}--page{reset} {arg_val}<Number>{reset}]"
    )
    print(
        f"{sec}Lists knowledge crystals (insights) with filters and pagination.{reset}\n"
    )

    print(f"{header}Sorting Order:{reset}")
    print(f"{sec}Insights are always sorted by three criteria in this order:{reset}")
    print(f"  1. {arg_name}Status:{reset}   ACTIVE insights are shown first.")
    print(
        f"  2. {arg_name}Strength:{reset} Insights with a higher strength (S:) are shown first."
    )
    print(f"  3. {arg_name}Time:{reset}     Newest insights are shown first.\n")

    print(f"{header}Filtering Options:{reset}")
    print(f"  {arg_name}--state <StateCode>{reset} Filter by state. See codes below.")
    print(
        f"  {arg_name}--page <Number>{reset}      (Optional) Specify the page number to display. Default is 1.\n"
    )

    print(f"{header}Available State Codes:{reset}")
    print(f"  {arg_val}1{reset} - {hi}ACTIVE{reset}   (Current, up-to-date knowledge)")
    print(
        f"  {arg_val}0{reset} - {lo}ARCHIVED{reset} (Outdated knowledge, superseded by a stronger insight)\n"
    )

    print(f"{header}Examples:{reset}")
    print(f"  {cmd}i{reset}                    # Show page 1 of all insights.")
    print(
        f"  {cmd}i {arg_name}--state {arg_val}1{reset}         # Show page 1 of only ACTIVE insights."
    )
    print(
        f"  {cmd}i {arg_name}--state {arg_val}0 {arg_name}--page {arg_val}3{reset}   # Show page 3 of only ARCHIVED insights."
    )


def _get_all_insights(memory):
    """Helper function to extract all nodes of type 'KnowledgeCrystalNode' from the graph."""
    insights = []
    for node_id, data in memory.graph.nodes(data=True):
        if data.get("type") == "KnowledgeCrystalNode":
            node_copy = data.copy()
            # IMPORTANT: Add the node's ID to its data dictionary for easy access later.
            node_copy["id"] = node_id
            insights.append(node_copy)
    return insights


def _sort_insights(insights: list):
    """
    Sorts a list of insights based on three criteria:
    1. By status (Active first).
    2. By strength (highest first).
    3. By timestamp (newest first).
    """
    insights.sort(key=lambda x: x.get("timestamp", ""), reverse=True)  # 3. Timestamp
    insights.sort(key=lambda x: int(x.get("strength", 1)), reverse=True)  # 2. Strength
    insights.sort(
        key=lambda x: int(x.get("active_status", 0)), reverse=True
    )  # 1. Status
    return insights


def _print_insight_row(style, insight: dict):
    node_id = insight.get("id", "")[:8]
    status_val = int(insight.get("active_status", 0))
    strength = int(insight.get("strength", 1))

    content = insight.get("content", "").replace("\n", " ").replace("\r", "")
    concepts = insight.get("source_concepts", "N/A")

    status_color = style["highlight"] if status_val == 1 else style["lowlight"]
    status_text = "ACTIVE" if status_val == 1 else "ARCHIVED"

    status_str = f"{status_color}{status_text:<9}{style['reset']}"
    strength_str = f"S:{strength:<4}"

    content_short = textwrap.shorten(content, width=60, placeholder="...")

    print(
        f"{status_str} | {strength_str} | ID: {node_id} | Concepts: {style['cmd_name']}{concepts:<35.35}{style['reset']}| Insight: '{style['secondary_text']}{content_short}{style['reset']}'"
    )
